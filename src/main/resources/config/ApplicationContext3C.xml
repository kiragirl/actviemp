<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:tx="http://www.springframework.org/schema/tx"
	xmlns:context="http://www.springframework.org/schema/context"
	xmlns:aop="http://www.springframework.org/schema/aop" xmlns:task="http://www.springframework.org/schema/task"
	xsi:schemaLocation="http://www.springframework.org/schema/beans   
                      http://www.springframework.org/schema/beans/spring-beans-3.2.xsd  
                      http://www.springframework.org/schema/context  
                      http://www.springframework.org/schema/context/spring-context-3.2.xsd  
                      http://www.springframework.org/schema/aop   
                      http://www.springframework.org/schema/aop/spring-aop.xsd        
                      http://www.springframework.org/schema/task  
                     http://www.springframework.org/schema/task/spring-task-3.2.xsd  
                     http://www.springframework.org/schema/tx   
                     http://www.springframework.org/schema/tx/spring-tx-3.2.xsd">
	<!--第三方工厂 -->
	<bean id="targetConnectionFactory" class="org.apache.activemq.ActiveMQConnectionFactory">
		<property name="brokerURL" value="tcp://127.0.0.1:61616" />
		<property name="userName" value="admin"></property>
		<property name="password" value="admin"></property>
		<property name="useAsyncSend" value="true" />
	</bean>
	<!-- ActiveMQ为我们提供了一个PooledConnectionFactory，通过往里面注入一个ActiveMQConnectionFactory 
		可以用来将Connection、Session和MessageProducer池化，这样可以大大的减少我们的资源消耗,要依赖于 activemq-pool包 -->
	<bean id="pooledConnectionFactory" class="org.apache.activemq.pool.PooledConnectionFactory">
		<property name="connectionFactory" ref="targetConnectionFactory" />
		<property name="maxConnections" value="100" />
	</bean>

	<!-- Spring用于管理真正的ConnectionFactory的ConnectionFactory -->
	<bean id="connectionFactory"
		class="org.springframework.jms.connection.SingleConnectionFactory">
		<!--消费者标示id -->
		<property name="clientId" value="clientId_001" />
		<!-- 目标ConnectionFactory对应真实的可以产生JMS Connection的ConnectionFactory -->
		<property name="targetConnectionFactory" ref="pooledConnectionFactory" />
	</bean>


	<!-- topic目的地配置，其实不管是topic还是queue则他们的底层实现不同但是通过封装api就差不多了，而在spring中更是简单 -->
	<bean id="destinationTopic" class="org.apache.activemq.command.ActiveMQTopic">
		<constructor-arg index="0" value="spring-topic" />
	</bean>

	<!--消息消费者监听类 -->
	<bean id="myMessageListener" class="com.liyiming.test.activemq.spring.MyMessageListener"></bean>
		<!--监听容器的配置 -->
		<bean id="myListenerContainer" class="org.springframework.jms.listener.DefaultMessageListenerContainer">
			<property name="connectionFactory" ref="connectionFactory" />
			<!--消息目的地 -->
			<property name="destination" ref="destinationTopic" />
			<!--消息监听类 -->
			<property name="messageListener" ref="myMessageListener" />
			<!-- 发布订阅模式 -->
			<property name="pubSubDomain" value="true" />
			<!-- 消息持久化值设置为true -->
			<property name="subscriptionDurable" value="true" />
			<!--消息接收超时 -->
			<property name="receiveTimeout" value="10000" />
			<!-- 接收者ID -->
			<property name="clientId" value="clientId_001" />
			<property name="durableSubscriptionName" value="clientId_001" />
		</bean>
</beans>  